#!/bin/bash
#
# Copyright 2014 Chris Cummins.
#
# This file is part of pip-db.
#
# pip-db is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pip-db is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pip-db.  If not, see <http://www.gnu.org/licenses/>.
#

# Print program usage
usage() {
    echo "Usage: $0 <csv-dataset>"
}

# Output a column $1 from the dataset
#    $1 column index
column() {
    if [[ $USING_HEADERS == 1 ]]; then
        tail -n+2 $FILE | @AWK@ -F $'\t' '{print $'$1'}'
    else
        @AWK@ -F $'\t' '{print $'$1'}' < $FILE
    fi
}

# Calculate a percentage total
#    $1 result
#    $2 total
perc() {
    if [[ -z $1 ]] || [[ -z $2 ]]; then
        echo "error: Internal calculation error" >&2
        exit 32
    fi
    echo "($1 / $2) * 100" | bc -l | xargs printf '%.2f\n'
}

# Output a result to temporary file
output() {
    echo -e "$@" >> $TMP
}

# Create a $TMP file for output
create_tmp_file() {
    # Temporary file used to store results
    TMP=/tmp/dsa.$(date +%s)

    rm -f $TMP
    touch $TMP
}

# Clean up $TMP
destroy_tmp_file() {
    rm -f $TMP
}

# Iterate over dataset
analyse_dataset() {
    # Output headers
    output "Row\tPopulated\t% \tUnique\t%  "

    for i in $(seq 1 $NO_COLUMNS); do

        if [[ $USING_HEADERS == 1 ]]; then
            COLUMN_NAME=`head -n1 $FILE | @AWK@ -F $'\t' '{print $'$i'}'`
        else
            COLUMN_NAME=$i
        fi

        NO_POPULATED=`column $i | @SED@ '/^$/d' | wc -l`
        POPULATED_PERC=`perc $NO_POPULATED $NO_ROWS`

        NO_UNIQUE=`column $i | sort -u | wc -l`
        UNIQUE_PERC=`perc $NO_UNIQUE $NO_ROWS`

        output "$COLUMN_NAME\t$NO_POPULATED\t$POPULATED_PERC%\t$NO_UNIQUE\t$UNIQUE_PERC%"
    done
}

# Print out results
output_results() {
    if [[ "$2" == "-t" ]]; then
        column -t -s $'\t' $TMP
    else
        tablify $TMP
    fi
}

main() {
    test -n "$DEBUG" && {
        set -x
    }

    # Check for file argument
    if [[ -z "$1" ]]; then
        usage
        exit 1
    fi

    # Check that file exists
    if [[ ! -f "$1" ]]; then
        echo "fatal: file '$1' not found!">&2
        exit 1
    fi

    # Whether the input dataset contains a header row
    USING_HEADERS=1

    # Our input dataset
    FILE="$1"

    # The dimensions of our dataset in rows and columns
    NO_COLUMNS=`head -n1 $FILE | @SED@ 's/\t/\n/g' | head -n-1 | wc -l`
    NO_ROWS=`wc -l $FILE | @AWK@ '{print $1}'`

    if [[ $USING_HEADERS == 1 ]]; then
        NO_ROWS=$((NO_ROWS-1))
    fi

    echo -e "Dataset: '$FILE' ($NO_ROWS records)\n"

    create_tmp_file

    analyse_dataset
    output_results $@

    destroy_tmp_file
}
main $@
